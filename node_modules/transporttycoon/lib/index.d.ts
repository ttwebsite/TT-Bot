import { PlayerPositions } from './models/PlayerPositions';
import { Players } from './models/Players';
import { PlayerWidget } from './models/PlayerWidget';
import { Snowflake } from './models/General';
import { Business } from './models/Business';
import { Faction } from './models/Faction';
import { UserData } from './models/UserData';
import { ActiveAirline } from './models/ActiveAirline';
import { Top10 } from './models/Stats';
import { Economy } from './models/Economy';
import { OwnedVehicles } from './models/OwnedVehicles';
import { Weather } from './models/Weather';
import { FactionInfo, FactionMember } from './models/FactionData';
import { Chest } from './models/Chest';
export declare class TransportTycoon {
    private token;
    charges: {
        checking: boolean;
        count: number;
        loaded: boolean;
    };
    private tycoon;
    settings: {
        serverIndex: number;
    };
    constructor(apiToken?: string, trackCharges?: boolean, timeout?: number);
    setupCharges(): Promise<any>;
    getCharges(): number;
    getCurrentWeather(server?: number): Promise<Weather>;
    getActiveAirlineRoutes(server?: number): Promise<ActiveAirline>;
    getPlayerPositions(server?: number): Promise<PlayerPositions>;
    getPlayers(server?: number): Promise<Players>;
    getPlayersWidget(server?: number): Promise<PlayerWidget>;
    getUserFromDiscord(discordId: string): Promise<Snowflake>;
    getUserInventoryHtml(userId: string): Promise<Players>;
    getUserSkillsHtml(userId: string): Promise<Players>;
    getUserBusinesses(userId: string): Promise<Business>;
    getUserOwnedVehicles(userId: string): Promise<OwnedVehicles>;
    getUserFaction(userId: string): Promise<Faction>;
    getKeyFactionSize(): Promise<[size: number]>;
    getKeyFactionMembers(): Promise<FactionMember[]>;
    getKeyFactionPerks(): Promise<[perks: number]>;
    getKeyFactionBalance(): Promise<[balance: number]>;
    getKeyFactionInfo(): Promise<FactionInfo>;
    getUserData(userId: string): Promise<UserData>;
    getUserDataAdvanced(userId: string): Promise<UserData>;
    getTop10(statName: string): Promise<Top10>;
    getResourceConfig(resourceName: string): Promise<any>;
    getAdvancedUserlist(server?: number): Promise<any>;
    getWebadmin(server?: number): Promise<any>;
    getEconomyInfo(): Promise<Economy[]>;
    getChestAdvanced(searchId: string): Promise<Chest>;
    getChest(searchId: string): Promise<Chest>;
}
